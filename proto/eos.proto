syntax = "proto3";
// based on https://github.com/Appscrunch/Multy-back/
package proto;

service NodeCommunications {

    // ServiceInfo gets node service build info
    rpc ServiceInfo (Empty) returns (ServiceVersion);

    // InitialAdd initializes tracked users
    rpc InitialAdd (UsersData) returns (ReplyInfo);

    // AddNewAddress add address for tracking
    rpc AddNewAddress (WatchAddress) returns (ReplyInfo);

    // GetBlockHeight gets head block height
    // (and additional info on chain state)
    rpc GetBlockHeight (Empty) returns (BlockHeight);

    // EventGetAdressBalance get EOS token balance
    // made for API compability
    rpc GetAddressBalance (Account) returns (Balance);

    // ResyncAddress resyncs account action history
    // Actions are pushed to NewTx stream
    rpc ResyncAddress (AddressToResync) returns (ReplyInfo);

    // NewBlock streams new block's info
    rpc NewBlock (Empty) returns (stream BlockHeight);

    // SendRawTx pushes transaction to chain
    rpc SendRawTx (RawTx) returns (SendTxResp);

    // NewTx streams new actions data
    rpc NewTx (Empty) returns (stream Action);

    // SyncState all the tracked account actions
    // starts with BlockHeight
    rpc SyncState (BlockHeight) returns (ReplyInfo);

    //Additional rpcs

    // GetChainState gets current blockchain state info
    rpc GetChainState (Empty) returns (ChainState);

    // AccountCreate creates account if cost is right
    rpc AccountCreate (AccountCreateReq) returns (ReplyInfo);

    // AccountCheck checks if account exists.
    // and returns account info if it does
    rpc AccountCheck (Account) returns (AccountInfo);

    // GetRAMPrice get actual RAM price using ram market
    rpc GetRAMPrice (Empty) returns (RAMPrice);

    // GetTokenBalance get balance for smart contract's token
    rpc GetTokenBalance (BalanceReq) returns (Balances);

    // GetKeyAccount gets account that is controled by given public key
    rpc GetKeyAccounts(PublicKey) returns (Accounts);
}

message Empty {

}

message ServiceVersion {
    string branch = 1;
    string commit = 2;
    string buildtime = 3;
    string lasttag = 4;
}


message UsersData {
    map<string, AddressExtended> map = 1;
}

message AddressExtended {
    string UserID = 1; // account name
    int32 WalletIndex = 2;
    int32 AddressIndex = 3;
}


message ReplyInfo {
    string message = 1;
}

message WatchAddress {
    string address = 1;
    string userID = 2;
    int32 WalletIndex = 3;
    int32 AddressIndex = 4;
}

message BlockHeight {
    uint32 head_block_num = 1;
    string head_block_id = 2;
    int64 head_block_time = 3; //unix time
}

message AddressToResync {
    string address = 1; // account name
    //TODO: start block
}

message Balance {
    string Balance = 1; // primary (EOS) token balance is string
}

message RawTx {
    bytes transaction = 1;
}

message SendTxResp {
    string transaction_id = 1;
}

message Action {
    string UserID = 1;
    int32 WalletIndex = 2;
    int32 AddressIndex =3;
    enum Type {
        TRANSFER_TOKEN = 0;
        ISSUE_TOKEN = 1;
        BUY_RAM_BYTES = 2;
        BUY_RAM = 3;
        SELL_RAM = 4;
    }
    Type type = 4;
    string from = 5;
    string to = 6;
    Asset amount = 7;
    string memo = 8;
    bool resync = 9;
    bytes transaction_id = 10;
    int64 action_index = 11; // index of action in transaction
    string address = 12;
    uint32 block_num = 13;
    int64 block_time = 14; //unix time
}

message BalanceReq {
    string account = 1; // account name
    string symbol = 2; // empty for all assets
    string code = 3; // smart contract code account name, empty for eosio.token
}

message Account {
    string name = 1;
}

message Asset {
    int64 amount = 1;
    uint32 precision = 2;
    string symbol = 3;
}

message AccountCreateReq {
    string name = 1;
    string active_key = 2;
    string owner_key = 3;

    uint64 ram = 4;
    int64 cpu = 5;
    int64 net = 6;
}

message AccountInfo {
    bool exist = 1;
    string public_key = 2; // deprecated, use owner_key & active_key
    string owner_key = 3;
    string active_key = 4;
}

message RAMPrice {
    double price = 1;
}

message Balances {
    string account = 1;
    repeated Asset assets = 2;
}

message ChainState {
    uint32 head_block_num = 1;
    bytes head_block_id = 2;
    int64 head_block_time = 3; //unix time
    uint32 last_irreversible_block_num = 4;
    bytes last_irreversible_block_id = 5;
}

message Accounts {
    repeated string account_names = 1;
}

message PublicKey {
    string public_key = 1;
}