/*
 * Copyright 2018 Idealnaya rabota LLC
 * Licensed under Multy.io license.
 * See LICENSE for details
 */

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: eos.proto

/*
Package proto is a generated protocol buffer package.

based on https://github.com/Appscrunch/Multy-back/

It is generated from these files:
	eos.proto

It has these top-level messages:
	Empty
	ServiceVersion
	UsersData
	AddressExtended
	ReplyInfo
	WatchAddress
	BlockHeight
	AddressToResync
	Balance
	RawTx
	SendTxResp
	Action
	BalanceReq
	Account
	Asset
	AccountCreateReq
	AccountInfo
	RAMPrice
	Balances
	ChainState
	Accounts
	PublicKey
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type Action_Type int32

const (
	Action_TRANSFER_TOKEN Action_Type = 0
	Action_ISSUE_TOKEN    Action_Type = 1
	Action_BUY_RAM_BYTES  Action_Type = 2
	Action_BUY_RAM        Action_Type = 3
	Action_SELL_RAM       Action_Type = 4
)

var Action_Type_name = map[int32]string{
	0: "TRANSFER_TOKEN",
	1: "ISSUE_TOKEN",
	2: "BUY_RAM_BYTES",
	3: "BUY_RAM",
	4: "SELL_RAM",
}
var Action_Type_value = map[string]int32{
	"TRANSFER_TOKEN": 0,
	"ISSUE_TOKEN":    1,
	"BUY_RAM_BYTES":  2,
	"BUY_RAM":        3,
	"SELL_RAM":       4,
}

func (x Action_Type) String() string {
	return proto1.EnumName(Action_Type_name, int32(x))
}
func (Action_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{11, 0} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto1.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ServiceVersion struct {
	Branch    string `protobuf:"bytes,1,opt,name=branch" json:"branch,omitempty"`
	Commit    string `protobuf:"bytes,2,opt,name=commit" json:"commit,omitempty"`
	Buildtime string `protobuf:"bytes,3,opt,name=buildtime" json:"buildtime,omitempty"`
	Lasttag   string `protobuf:"bytes,4,opt,name=lasttag" json:"lasttag,omitempty"`
}

func (m *ServiceVersion) Reset()                    { *m = ServiceVersion{} }
func (m *ServiceVersion) String() string            { return proto1.CompactTextString(m) }
func (*ServiceVersion) ProtoMessage()               {}
func (*ServiceVersion) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ServiceVersion) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *ServiceVersion) GetCommit() string {
	if m != nil {
		return m.Commit
	}
	return ""
}

func (m *ServiceVersion) GetBuildtime() string {
	if m != nil {
		return m.Buildtime
	}
	return ""
}

func (m *ServiceVersion) GetLasttag() string {
	if m != nil {
		return m.Lasttag
	}
	return ""
}

type UsersData struct {
	Map map[string]*AddressExtended `protobuf:"bytes,1,rep,name=map" json:"map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *UsersData) Reset()                    { *m = UsersData{} }
func (m *UsersData) String() string            { return proto1.CompactTextString(m) }
func (*UsersData) ProtoMessage()               {}
func (*UsersData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UsersData) GetMap() map[string]*AddressExtended {
	if m != nil {
		return m.Map
	}
	return nil
}

type AddressExtended struct {
	UserID       string `protobuf:"bytes,1,opt,name=UserID,json=userID" json:"UserID,omitempty"`
	WalletIndex  int32  `protobuf:"varint,2,opt,name=WalletIndex,json=walletIndex" json:"WalletIndex,omitempty"`
	AddressIndex int32  `protobuf:"varint,3,opt,name=AddressIndex,json=addressIndex" json:"AddressIndex,omitempty"`
}

func (m *AddressExtended) Reset()                    { *m = AddressExtended{} }
func (m *AddressExtended) String() string            { return proto1.CompactTextString(m) }
func (*AddressExtended) ProtoMessage()               {}
func (*AddressExtended) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AddressExtended) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *AddressExtended) GetWalletIndex() int32 {
	if m != nil {
		return m.WalletIndex
	}
	return 0
}

func (m *AddressExtended) GetAddressIndex() int32 {
	if m != nil {
		return m.AddressIndex
	}
	return 0
}

type ReplyInfo struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *ReplyInfo) Reset()                    { *m = ReplyInfo{} }
func (m *ReplyInfo) String() string            { return proto1.CompactTextString(m) }
func (*ReplyInfo) ProtoMessage()               {}
func (*ReplyInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ReplyInfo) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type WatchAddress struct {
	Address      string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	UserID       string `protobuf:"bytes,2,opt,name=userID" json:"userID,omitempty"`
	WalletIndex  int32  `protobuf:"varint,3,opt,name=WalletIndex,json=walletIndex" json:"WalletIndex,omitempty"`
	AddressIndex int32  `protobuf:"varint,4,opt,name=AddressIndex,json=addressIndex" json:"AddressIndex,omitempty"`
}

func (m *WatchAddress) Reset()                    { *m = WatchAddress{} }
func (m *WatchAddress) String() string            { return proto1.CompactTextString(m) }
func (*WatchAddress) ProtoMessage()               {}
func (*WatchAddress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *WatchAddress) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *WatchAddress) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *WatchAddress) GetWalletIndex() int32 {
	if m != nil {
		return m.WalletIndex
	}
	return 0
}

func (m *WatchAddress) GetAddressIndex() int32 {
	if m != nil {
		return m.AddressIndex
	}
	return 0
}

type BlockHeight struct {
	HeadBlockNum  uint32 `protobuf:"varint,1,opt,name=head_block_num,json=headBlockNum" json:"head_block_num,omitempty"`
	HeadBlockId   string `protobuf:"bytes,2,opt,name=head_block_id,json=headBlockId" json:"head_block_id,omitempty"`
	HeadBlockTime int64  `protobuf:"varint,3,opt,name=head_block_time,json=headBlockTime" json:"head_block_time,omitempty"`
}

func (m *BlockHeight) Reset()                    { *m = BlockHeight{} }
func (m *BlockHeight) String() string            { return proto1.CompactTextString(m) }
func (*BlockHeight) ProtoMessage()               {}
func (*BlockHeight) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *BlockHeight) GetHeadBlockNum() uint32 {
	if m != nil {
		return m.HeadBlockNum
	}
	return 0
}

func (m *BlockHeight) GetHeadBlockId() string {
	if m != nil {
		return m.HeadBlockId
	}
	return ""
}

func (m *BlockHeight) GetHeadBlockTime() int64 {
	if m != nil {
		return m.HeadBlockTime
	}
	return 0
}

type AddressToResync struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
}

func (m *AddressToResync) Reset()                    { *m = AddressToResync{} }
func (m *AddressToResync) String() string            { return proto1.CompactTextString(m) }
func (*AddressToResync) ProtoMessage()               {}
func (*AddressToResync) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *AddressToResync) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type Balance struct {
	Balance string `protobuf:"bytes,1,opt,name=Balance,json=balance" json:"Balance,omitempty"`
}

func (m *Balance) Reset()                    { *m = Balance{} }
func (m *Balance) String() string            { return proto1.CompactTextString(m) }
func (*Balance) ProtoMessage()               {}
func (*Balance) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Balance) GetBalance() string {
	if m != nil {
		return m.Balance
	}
	return ""
}

type RawTx struct {
	Transaction []byte `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (m *RawTx) Reset()                    { *m = RawTx{} }
func (m *RawTx) String() string            { return proto1.CompactTextString(m) }
func (*RawTx) ProtoMessage()               {}
func (*RawTx) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *RawTx) GetTransaction() []byte {
	if m != nil {
		return m.Transaction
	}
	return nil
}

type SendTxResp struct {
	TransactionId string `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId" json:"transaction_id,omitempty"`
}

func (m *SendTxResp) Reset()                    { *m = SendTxResp{} }
func (m *SendTxResp) String() string            { return proto1.CompactTextString(m) }
func (*SendTxResp) ProtoMessage()               {}
func (*SendTxResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *SendTxResp) GetTransactionId() string {
	if m != nil {
		return m.TransactionId
	}
	return ""
}

type Action struct {
	UserID        string      `protobuf:"bytes,1,opt,name=UserID,json=userID" json:"UserID,omitempty"`
	WalletIndex   int32       `protobuf:"varint,2,opt,name=WalletIndex,json=walletIndex" json:"WalletIndex,omitempty"`
	AddressIndex  int32       `protobuf:"varint,3,opt,name=AddressIndex,json=addressIndex" json:"AddressIndex,omitempty"`
	Type          Action_Type `protobuf:"varint,4,opt,name=type,enum=proto.Action_Type" json:"type,omitempty"`
	From          string      `protobuf:"bytes,5,opt,name=from" json:"from,omitempty"`
	To            string      `protobuf:"bytes,6,opt,name=to" json:"to,omitempty"`
	Amount        *Asset      `protobuf:"bytes,7,opt,name=amount" json:"amount,omitempty"`
	Memo          string      `protobuf:"bytes,8,opt,name=memo" json:"memo,omitempty"`
	Resync        bool        `protobuf:"varint,9,opt,name=resync" json:"resync,omitempty"`
	TransactionId []byte      `protobuf:"bytes,10,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	ActionIndex   int64       `protobuf:"varint,11,opt,name=action_index,json=actionIndex" json:"action_index,omitempty"`
	Address       string      `protobuf:"bytes,12,opt,name=address" json:"address,omitempty"`
	BlockNum      uint32      `protobuf:"varint,13,opt,name=block_num,json=blockNum" json:"block_num,omitempty"`
	BlockTime     int64       `protobuf:"varint,14,opt,name=block_time,json=blockTime" json:"block_time,omitempty"`
}

func (m *Action) Reset()                    { *m = Action{} }
func (m *Action) String() string            { return proto1.CompactTextString(m) }
func (*Action) ProtoMessage()               {}
func (*Action) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Action) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *Action) GetWalletIndex() int32 {
	if m != nil {
		return m.WalletIndex
	}
	return 0
}

func (m *Action) GetAddressIndex() int32 {
	if m != nil {
		return m.AddressIndex
	}
	return 0
}

func (m *Action) GetType() Action_Type {
	if m != nil {
		return m.Type
	}
	return Action_TRANSFER_TOKEN
}

func (m *Action) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *Action) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *Action) GetAmount() *Asset {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *Action) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *Action) GetResync() bool {
	if m != nil {
		return m.Resync
	}
	return false
}

func (m *Action) GetTransactionId() []byte {
	if m != nil {
		return m.TransactionId
	}
	return nil
}

func (m *Action) GetActionIndex() int64 {
	if m != nil {
		return m.ActionIndex
	}
	return 0
}

func (m *Action) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Action) GetBlockNum() uint32 {
	if m != nil {
		return m.BlockNum
	}
	return 0
}

func (m *Action) GetBlockTime() int64 {
	if m != nil {
		return m.BlockTime
	}
	return 0
}

type BalanceReq struct {
	Account string `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	Symbol  string `protobuf:"bytes,2,opt,name=symbol" json:"symbol,omitempty"`
	Code    string `protobuf:"bytes,3,opt,name=code" json:"code,omitempty"`
}

func (m *BalanceReq) Reset()                    { *m = BalanceReq{} }
func (m *BalanceReq) String() string            { return proto1.CompactTextString(m) }
func (*BalanceReq) ProtoMessage()               {}
func (*BalanceReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *BalanceReq) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *BalanceReq) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *BalanceReq) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

type Account struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Account) Reset()                    { *m = Account{} }
func (m *Account) String() string            { return proto1.CompactTextString(m) }
func (*Account) ProtoMessage()               {}
func (*Account) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Account) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Asset struct {
	Amount    int64  `protobuf:"varint,1,opt,name=amount" json:"amount,omitempty"`
	Precision uint32 `protobuf:"varint,2,opt,name=precision" json:"precision,omitempty"`
	Symbol    string `protobuf:"bytes,3,opt,name=symbol" json:"symbol,omitempty"`
}

func (m *Asset) Reset()                    { *m = Asset{} }
func (m *Asset) String() string            { return proto1.CompactTextString(m) }
func (*Asset) ProtoMessage()               {}
func (*Asset) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Asset) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Asset) GetPrecision() uint32 {
	if m != nil {
		return m.Precision
	}
	return 0
}

func (m *Asset) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

type AccountCreateReq struct {
	Name      string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	ActiveKey string `protobuf:"bytes,2,opt,name=active_key,json=activeKey" json:"active_key,omitempty"`
	OwnerKey  string `protobuf:"bytes,3,opt,name=owner_key,json=ownerKey" json:"owner_key,omitempty"`
	Ram       uint64 `protobuf:"varint,4,opt,name=ram" json:"ram,omitempty"`
	Cpu       int64  `protobuf:"varint,5,opt,name=cpu" json:"cpu,omitempty"`
	Net       int64  `protobuf:"varint,6,opt,name=net" json:"net,omitempty"`
}

func (m *AccountCreateReq) Reset()                    { *m = AccountCreateReq{} }
func (m *AccountCreateReq) String() string            { return proto1.CompactTextString(m) }
func (*AccountCreateReq) ProtoMessage()               {}
func (*AccountCreateReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *AccountCreateReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AccountCreateReq) GetActiveKey() string {
	if m != nil {
		return m.ActiveKey
	}
	return ""
}

func (m *AccountCreateReq) GetOwnerKey() string {
	if m != nil {
		return m.OwnerKey
	}
	return ""
}

func (m *AccountCreateReq) GetRam() uint64 {
	if m != nil {
		return m.Ram
	}
	return 0
}

func (m *AccountCreateReq) GetCpu() int64 {
	if m != nil {
		return m.Cpu
	}
	return 0
}

func (m *AccountCreateReq) GetNet() int64 {
	if m != nil {
		return m.Net
	}
	return 0
}

type AccountInfo struct {
	Exist     bool   `protobuf:"varint,1,opt,name=exist" json:"exist,omitempty"`
	PublicKey string `protobuf:"bytes,2,opt,name=public_key,json=publicKey" json:"public_key,omitempty"`
	OwnerKey  string `protobuf:"bytes,3,opt,name=owner_key,json=ownerKey" json:"owner_key,omitempty"`
	ActiveKey string `protobuf:"bytes,4,opt,name=active_key,json=activeKey" json:"active_key,omitempty"`
}

func (m *AccountInfo) Reset()                    { *m = AccountInfo{} }
func (m *AccountInfo) String() string            { return proto1.CompactTextString(m) }
func (*AccountInfo) ProtoMessage()               {}
func (*AccountInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *AccountInfo) GetExist() bool {
	if m != nil {
		return m.Exist
	}
	return false
}

func (m *AccountInfo) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *AccountInfo) GetOwnerKey() string {
	if m != nil {
		return m.OwnerKey
	}
	return ""
}

func (m *AccountInfo) GetActiveKey() string {
	if m != nil {
		return m.ActiveKey
	}
	return ""
}

type RAMPrice struct {
	Price float64 `protobuf:"fixed64,1,opt,name=price" json:"price,omitempty"`
}

func (m *RAMPrice) Reset()                    { *m = RAMPrice{} }
func (m *RAMPrice) String() string            { return proto1.CompactTextString(m) }
func (*RAMPrice) ProtoMessage()               {}
func (*RAMPrice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *RAMPrice) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

type Balances struct {
	Account string   `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	Assets  []*Asset `protobuf:"bytes,2,rep,name=assets" json:"assets,omitempty"`
}

func (m *Balances) Reset()                    { *m = Balances{} }
func (m *Balances) String() string            { return proto1.CompactTextString(m) }
func (*Balances) ProtoMessage()               {}
func (*Balances) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *Balances) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *Balances) GetAssets() []*Asset {
	if m != nil {
		return m.Assets
	}
	return nil
}

type ChainState struct {
	HeadBlockNum             uint32 `protobuf:"varint,1,opt,name=head_block_num,json=headBlockNum" json:"head_block_num,omitempty"`
	HeadBlockId              []byte `protobuf:"bytes,2,opt,name=head_block_id,json=headBlockId,proto3" json:"head_block_id,omitempty"`
	HeadBlockTime            int64  `protobuf:"varint,3,opt,name=head_block_time,json=headBlockTime" json:"head_block_time,omitempty"`
	LastIrreversibleBlockNum uint32 `protobuf:"varint,4,opt,name=last_irreversible_block_num,json=lastIrreversibleBlockNum" json:"last_irreversible_block_num,omitempty"`
	LastIrreversibleBlockId  []byte `protobuf:"bytes,5,opt,name=last_irreversible_block_id,json=lastIrreversibleBlockId,proto3" json:"last_irreversible_block_id,omitempty"`
}

func (m *ChainState) Reset()                    { *m = ChainState{} }
func (m *ChainState) String() string            { return proto1.CompactTextString(m) }
func (*ChainState) ProtoMessage()               {}
func (*ChainState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *ChainState) GetHeadBlockNum() uint32 {
	if m != nil {
		return m.HeadBlockNum
	}
	return 0
}

func (m *ChainState) GetHeadBlockId() []byte {
	if m != nil {
		return m.HeadBlockId
	}
	return nil
}

func (m *ChainState) GetHeadBlockTime() int64 {
	if m != nil {
		return m.HeadBlockTime
	}
	return 0
}

func (m *ChainState) GetLastIrreversibleBlockNum() uint32 {
	if m != nil {
		return m.LastIrreversibleBlockNum
	}
	return 0
}

func (m *ChainState) GetLastIrreversibleBlockId() []byte {
	if m != nil {
		return m.LastIrreversibleBlockId
	}
	return nil
}

type Accounts struct {
	AccountNames []string `protobuf:"bytes,1,rep,name=account_names,json=accountNames" json:"account_names,omitempty"`
}

func (m *Accounts) Reset()                    { *m = Accounts{} }
func (m *Accounts) String() string            { return proto1.CompactTextString(m) }
func (*Accounts) ProtoMessage()               {}
func (*Accounts) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *Accounts) GetAccountNames() []string {
	if m != nil {
		return m.AccountNames
	}
	return nil
}

type PublicKey struct {
	PublicKey string `protobuf:"bytes,1,opt,name=public_key,json=publicKey" json:"public_key,omitempty"`
}

func (m *PublicKey) Reset()                    { *m = PublicKey{} }
func (m *PublicKey) String() string            { return proto1.CompactTextString(m) }
func (*PublicKey) ProtoMessage()               {}
func (*PublicKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *PublicKey) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func init() {
	proto1.RegisterType((*Empty)(nil), "proto.Empty")
	proto1.RegisterType((*ServiceVersion)(nil), "proto.ServiceVersion")
	proto1.RegisterType((*UsersData)(nil), "proto.UsersData")
	proto1.RegisterType((*AddressExtended)(nil), "proto.AddressExtended")
	proto1.RegisterType((*ReplyInfo)(nil), "proto.ReplyInfo")
	proto1.RegisterType((*WatchAddress)(nil), "proto.WatchAddress")
	proto1.RegisterType((*BlockHeight)(nil), "proto.BlockHeight")
	proto1.RegisterType((*AddressToResync)(nil), "proto.AddressToResync")
	proto1.RegisterType((*Balance)(nil), "proto.Balance")
	proto1.RegisterType((*RawTx)(nil), "proto.RawTx")
	proto1.RegisterType((*SendTxResp)(nil), "proto.SendTxResp")
	proto1.RegisterType((*Action)(nil), "proto.Action")
	proto1.RegisterType((*BalanceReq)(nil), "proto.BalanceReq")
	proto1.RegisterType((*Account)(nil), "proto.Account")
	proto1.RegisterType((*Asset)(nil), "proto.Asset")
	proto1.RegisterType((*AccountCreateReq)(nil), "proto.AccountCreateReq")
	proto1.RegisterType((*AccountInfo)(nil), "proto.AccountInfo")
	proto1.RegisterType((*RAMPrice)(nil), "proto.RAMPrice")
	proto1.RegisterType((*Balances)(nil), "proto.Balances")
	proto1.RegisterType((*ChainState)(nil), "proto.ChainState")
	proto1.RegisterType((*Accounts)(nil), "proto.Accounts")
	proto1.RegisterType((*PublicKey)(nil), "proto.PublicKey")
	proto1.RegisterEnum("proto.Action_Type", Action_Type_name, Action_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NodeCommunications service

type NodeCommunicationsClient interface {
	// ServiceInfo gets node service build info
	ServiceInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServiceVersion, error)
	// InitialAdd initializes tracked users
	InitialAdd(ctx context.Context, in *UsersData, opts ...grpc.CallOption) (*ReplyInfo, error)
	// AddNewAddress add address for tracking
	AddNewAddress(ctx context.Context, in *WatchAddress, opts ...grpc.CallOption) (*ReplyInfo, error)
	// GetBlockHeight gets head block height
	// (and additional info on chain state)
	GetBlockHeight(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BlockHeight, error)
	// EventGetAdressBalance get EOS token balance
	// made for API compability
	GetAddressBalance(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Balance, error)
	// ResyncAddress resyncs account action history
	// Actions are pushed to NewTx stream
	ResyncAddress(ctx context.Context, in *AddressToResync, opts ...grpc.CallOption) (*ReplyInfo, error)
	// NewBlock streams new block's info
	NewBlock(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommunications_NewBlockClient, error)
	// SendRawTx pushes transaction to chain
	SendRawTx(ctx context.Context, in *RawTx, opts ...grpc.CallOption) (*SendTxResp, error)
	// NewTx streams new actions data
	NewTx(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommunications_NewTxClient, error)
	// SyncState all the tracked account actions
	// starts with BlockHeight
	SyncState(ctx context.Context, in *BlockHeight, opts ...grpc.CallOption) (*ReplyInfo, error)
	// GetChainState gets current blockchain state info
	GetChainState(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ChainState, error)
	// AccountCreate creates account if cost is right
	AccountCreate(ctx context.Context, in *AccountCreateReq, opts ...grpc.CallOption) (*ReplyInfo, error)
	// AccountCheck checks if account exists.
	// and returns account info if it does
	AccountCheck(ctx context.Context, in *Account, opts ...grpc.CallOption) (*AccountInfo, error)
	// GetRAMPrice get actual RAM price using ram market
	GetRAMPrice(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RAMPrice, error)
	// GetTokenBalance get balance for smart contract's token
	GetTokenBalance(ctx context.Context, in *BalanceReq, opts ...grpc.CallOption) (*Balances, error)
	// GetKeyAccount gets account that is controled by given public key
	GetKeyAccounts(ctx context.Context, in *PublicKey, opts ...grpc.CallOption) (*Accounts, error)
}

type nodeCommunicationsClient struct {
	cc *grpc.ClientConn
}

func NewNodeCommunicationsClient(cc *grpc.ClientConn) NodeCommunicationsClient {
	return &nodeCommunicationsClient{cc}
}

func (c *nodeCommunicationsClient) ServiceInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServiceVersion, error) {
	out := new(ServiceVersion)
	err := grpc.Invoke(ctx, "/proto.NodeCommunications/ServiceInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommunicationsClient) InitialAdd(ctx context.Context, in *UsersData, opts ...grpc.CallOption) (*ReplyInfo, error) {
	out := new(ReplyInfo)
	err := grpc.Invoke(ctx, "/proto.NodeCommunications/InitialAdd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommunicationsClient) AddNewAddress(ctx context.Context, in *WatchAddress, opts ...grpc.CallOption) (*ReplyInfo, error) {
	out := new(ReplyInfo)
	err := grpc.Invoke(ctx, "/proto.NodeCommunications/AddNewAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommunicationsClient) GetBlockHeight(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BlockHeight, error) {
	out := new(BlockHeight)
	err := grpc.Invoke(ctx, "/proto.NodeCommunications/GetBlockHeight", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommunicationsClient) GetAddressBalance(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Balance, error) {
	out := new(Balance)
	err := grpc.Invoke(ctx, "/proto.NodeCommunications/GetAddressBalance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommunicationsClient) ResyncAddress(ctx context.Context, in *AddressToResync, opts ...grpc.CallOption) (*ReplyInfo, error) {
	out := new(ReplyInfo)
	err := grpc.Invoke(ctx, "/proto.NodeCommunications/ResyncAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommunicationsClient) NewBlock(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommunications_NewBlockClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NodeCommunications_serviceDesc.Streams[0], c.cc, "/proto.NodeCommunications/NewBlock", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeCommunicationsNewBlockClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeCommunications_NewBlockClient interface {
	Recv() (*BlockHeight, error)
	grpc.ClientStream
}

type nodeCommunicationsNewBlockClient struct {
	grpc.ClientStream
}

func (x *nodeCommunicationsNewBlockClient) Recv() (*BlockHeight, error) {
	m := new(BlockHeight)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeCommunicationsClient) SendRawTx(ctx context.Context, in *RawTx, opts ...grpc.CallOption) (*SendTxResp, error) {
	out := new(SendTxResp)
	err := grpc.Invoke(ctx, "/proto.NodeCommunications/SendRawTx", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommunicationsClient) NewTx(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommunications_NewTxClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NodeCommunications_serviceDesc.Streams[1], c.cc, "/proto.NodeCommunications/NewTx", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeCommunicationsNewTxClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeCommunications_NewTxClient interface {
	Recv() (*Action, error)
	grpc.ClientStream
}

type nodeCommunicationsNewTxClient struct {
	grpc.ClientStream
}

func (x *nodeCommunicationsNewTxClient) Recv() (*Action, error) {
	m := new(Action)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeCommunicationsClient) SyncState(ctx context.Context, in *BlockHeight, opts ...grpc.CallOption) (*ReplyInfo, error) {
	out := new(ReplyInfo)
	err := grpc.Invoke(ctx, "/proto.NodeCommunications/SyncState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommunicationsClient) GetChainState(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ChainState, error) {
	out := new(ChainState)
	err := grpc.Invoke(ctx, "/proto.NodeCommunications/GetChainState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommunicationsClient) AccountCreate(ctx context.Context, in *AccountCreateReq, opts ...grpc.CallOption) (*ReplyInfo, error) {
	out := new(ReplyInfo)
	err := grpc.Invoke(ctx, "/proto.NodeCommunications/AccountCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommunicationsClient) AccountCheck(ctx context.Context, in *Account, opts ...grpc.CallOption) (*AccountInfo, error) {
	out := new(AccountInfo)
	err := grpc.Invoke(ctx, "/proto.NodeCommunications/AccountCheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommunicationsClient) GetRAMPrice(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RAMPrice, error) {
	out := new(RAMPrice)
	err := grpc.Invoke(ctx, "/proto.NodeCommunications/GetRAMPrice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommunicationsClient) GetTokenBalance(ctx context.Context, in *BalanceReq, opts ...grpc.CallOption) (*Balances, error) {
	out := new(Balances)
	err := grpc.Invoke(ctx, "/proto.NodeCommunications/GetTokenBalance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommunicationsClient) GetKeyAccounts(ctx context.Context, in *PublicKey, opts ...grpc.CallOption) (*Accounts, error) {
	out := new(Accounts)
	err := grpc.Invoke(ctx, "/proto.NodeCommunications/GetKeyAccounts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NodeCommunications service

type NodeCommunicationsServer interface {
	// ServiceInfo gets node service build info
	ServiceInfo(context.Context, *Empty) (*ServiceVersion, error)
	// InitialAdd initializes tracked users
	InitialAdd(context.Context, *UsersData) (*ReplyInfo, error)
	// AddNewAddress add address for tracking
	AddNewAddress(context.Context, *WatchAddress) (*ReplyInfo, error)
	// GetBlockHeight gets head block height
	// (and additional info on chain state)
	GetBlockHeight(context.Context, *Empty) (*BlockHeight, error)
	// EventGetAdressBalance get EOS token balance
	// made for API compability
	GetAddressBalance(context.Context, *Account) (*Balance, error)
	// ResyncAddress resyncs account action history
	// Actions are pushed to NewTx stream
	ResyncAddress(context.Context, *AddressToResync) (*ReplyInfo, error)
	// NewBlock streams new block's info
	NewBlock(*Empty, NodeCommunications_NewBlockServer) error
	// SendRawTx pushes transaction to chain
	SendRawTx(context.Context, *RawTx) (*SendTxResp, error)
	// NewTx streams new actions data
	NewTx(*Empty, NodeCommunications_NewTxServer) error
	// SyncState all the tracked account actions
	// starts with BlockHeight
	SyncState(context.Context, *BlockHeight) (*ReplyInfo, error)
	// GetChainState gets current blockchain state info
	GetChainState(context.Context, *Empty) (*ChainState, error)
	// AccountCreate creates account if cost is right
	AccountCreate(context.Context, *AccountCreateReq) (*ReplyInfo, error)
	// AccountCheck checks if account exists.
	// and returns account info if it does
	AccountCheck(context.Context, *Account) (*AccountInfo, error)
	// GetRAMPrice get actual RAM price using ram market
	GetRAMPrice(context.Context, *Empty) (*RAMPrice, error)
	// GetTokenBalance get balance for smart contract's token
	GetTokenBalance(context.Context, *BalanceReq) (*Balances, error)
	// GetKeyAccount gets account that is controled by given public key
	GetKeyAccounts(context.Context, *PublicKey) (*Accounts, error)
}

func RegisterNodeCommunicationsServer(s *grpc.Server, srv NodeCommunicationsServer) {
	s.RegisterService(&_NodeCommunications_serviceDesc, srv)
}

func _NodeCommunications_ServiceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommunicationsServer).ServiceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NodeCommunications/ServiceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommunicationsServer).ServiceInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommunications_InitialAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommunicationsServer).InitialAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NodeCommunications/InitialAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommunicationsServer).InitialAdd(ctx, req.(*UsersData))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommunications_AddNewAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommunicationsServer).AddNewAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NodeCommunications/AddNewAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommunicationsServer).AddNewAddress(ctx, req.(*WatchAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommunications_GetBlockHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommunicationsServer).GetBlockHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NodeCommunications/GetBlockHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommunicationsServer).GetBlockHeight(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommunications_GetAddressBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommunicationsServer).GetAddressBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NodeCommunications/GetAddressBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommunicationsServer).GetAddressBalance(ctx, req.(*Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommunications_ResyncAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressToResync)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommunicationsServer).ResyncAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NodeCommunications/ResyncAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommunicationsServer).ResyncAddress(ctx, req.(*AddressToResync))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommunications_NewBlock_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeCommunicationsServer).NewBlock(m, &nodeCommunicationsNewBlockServer{stream})
}

type NodeCommunications_NewBlockServer interface {
	Send(*BlockHeight) error
	grpc.ServerStream
}

type nodeCommunicationsNewBlockServer struct {
	grpc.ServerStream
}

func (x *nodeCommunicationsNewBlockServer) Send(m *BlockHeight) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeCommunications_SendRawTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommunicationsServer).SendRawTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NodeCommunications/SendRawTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommunicationsServer).SendRawTx(ctx, req.(*RawTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommunications_NewTx_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeCommunicationsServer).NewTx(m, &nodeCommunicationsNewTxServer{stream})
}

type NodeCommunications_NewTxServer interface {
	Send(*Action) error
	grpc.ServerStream
}

type nodeCommunicationsNewTxServer struct {
	grpc.ServerStream
}

func (x *nodeCommunicationsNewTxServer) Send(m *Action) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeCommunications_SyncState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockHeight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommunicationsServer).SyncState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NodeCommunications/SyncState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommunicationsServer).SyncState(ctx, req.(*BlockHeight))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommunications_GetChainState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommunicationsServer).GetChainState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NodeCommunications/GetChainState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommunicationsServer).GetChainState(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommunications_AccountCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommunicationsServer).AccountCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NodeCommunications/AccountCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommunicationsServer).AccountCreate(ctx, req.(*AccountCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommunications_AccountCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommunicationsServer).AccountCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NodeCommunications/AccountCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommunicationsServer).AccountCheck(ctx, req.(*Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommunications_GetRAMPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommunicationsServer).GetRAMPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NodeCommunications/GetRAMPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommunicationsServer).GetRAMPrice(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommunications_GetTokenBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommunicationsServer).GetTokenBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NodeCommunications/GetTokenBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommunicationsServer).GetTokenBalance(ctx, req.(*BalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommunications_GetKeyAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommunicationsServer).GetKeyAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NodeCommunications/GetKeyAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommunicationsServer).GetKeyAccounts(ctx, req.(*PublicKey))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeCommunications_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.NodeCommunications",
	HandlerType: (*NodeCommunicationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ServiceInfo",
			Handler:    _NodeCommunications_ServiceInfo_Handler,
		},
		{
			MethodName: "InitialAdd",
			Handler:    _NodeCommunications_InitialAdd_Handler,
		},
		{
			MethodName: "AddNewAddress",
			Handler:    _NodeCommunications_AddNewAddress_Handler,
		},
		{
			MethodName: "GetBlockHeight",
			Handler:    _NodeCommunications_GetBlockHeight_Handler,
		},
		{
			MethodName: "GetAddressBalance",
			Handler:    _NodeCommunications_GetAddressBalance_Handler,
		},
		{
			MethodName: "ResyncAddress",
			Handler:    _NodeCommunications_ResyncAddress_Handler,
		},
		{
			MethodName: "SendRawTx",
			Handler:    _NodeCommunications_SendRawTx_Handler,
		},
		{
			MethodName: "SyncState",
			Handler:    _NodeCommunications_SyncState_Handler,
		},
		{
			MethodName: "GetChainState",
			Handler:    _NodeCommunications_GetChainState_Handler,
		},
		{
			MethodName: "AccountCreate",
			Handler:    _NodeCommunications_AccountCreate_Handler,
		},
		{
			MethodName: "AccountCheck",
			Handler:    _NodeCommunications_AccountCheck_Handler,
		},
		{
			MethodName: "GetRAMPrice",
			Handler:    _NodeCommunications_GetRAMPrice_Handler,
		},
		{
			MethodName: "GetTokenBalance",
			Handler:    _NodeCommunications_GetTokenBalance_Handler,
		},
		{
			MethodName: "GetKeyAccounts",
			Handler:    _NodeCommunications_GetKeyAccounts_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NewBlock",
			Handler:       _NodeCommunications_NewBlock_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "NewTx",
			Handler:       _NodeCommunications_NewTx_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "eos.proto",
}

func init() { proto1.RegisterFile("eos.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x5f, 0x73, 0xdb, 0x44,
	0x10, 0x47, 0x91, 0x9d, 0x58, 0x2b, 0xc9, 0x71, 0x0e, 0x68, 0x45, 0xda, 0xce, 0x04, 0xf5, 0xcf,
	0x14, 0xda, 0x09, 0x21, 0x19, 0x18, 0x28, 0xc3, 0x83, 0xd3, 0x9a, 0x60, 0xda, 0x9a, 0xce, 0xd9,
	0xa1, 0xd3, 0x27, 0xcf, 0x59, 0xba, 0x36, 0x9a, 0x58, 0x92, 0x91, 0xce, 0x49, 0xfc, 0x02, 0x6f,
	0x0c, 0x1f, 0x81, 0xef, 0xc4, 0x37, 0xe2, 0x05, 0xe6, 0x56, 0x77, 0x8a, 0x64, 0x5c, 0x32, 0x03,
	0xc3, 0x93, 0x6e, 0xff, 0x68, 0xf7, 0x77, 0xbb, 0xbf, 0xbb, 0x3d, 0xb0, 0x78, 0x9a, 0xef, 0xce,
	0xb2, 0x54, 0xa4, 0xa4, 0x89, 0x1f, 0x7f, 0x03, 0x9a, 0xbd, 0x78, 0x26, 0x16, 0xfe, 0x05, 0xb4,
	0x87, 0x3c, 0x3b, 0x8b, 0x02, 0xfe, 0x03, 0xcf, 0xf2, 0x28, 0x4d, 0xc8, 0x35, 0x58, 0x9f, 0x64,
	0x2c, 0x09, 0x4e, 0x3c, 0x63, 0xc7, 0xb8, 0x6f, 0x51, 0x25, 0x49, 0x7d, 0x90, 0xc6, 0x71, 0x24,
	0xbc, 0xb5, 0x42, 0x5f, 0x48, 0xe4, 0x26, 0x58, 0x93, 0x79, 0x34, 0x0d, 0x45, 0x14, 0x73, 0xcf,
	0x44, 0xd3, 0xa5, 0x82, 0x78, 0xb0, 0x31, 0x65, 0xb9, 0x10, 0xec, 0x8d, 0xd7, 0x40, 0x9b, 0x16,
	0xfd, 0x5f, 0x0d, 0xb0, 0x8e, 0x73, 0x9e, 0xe5, 0x4f, 0x98, 0x60, 0xe4, 0x01, 0x98, 0x31, 0x9b,
	0x79, 0xc6, 0x8e, 0x79, 0xdf, 0xde, 0xff, 0xa0, 0x00, 0xbb, 0x5b, 0x9a, 0x77, 0x9f, 0xb3, 0x59,
	0x2f, 0x11, 0xd9, 0x82, 0x4a, 0xaf, 0xed, 0x01, 0xb4, 0xb4, 0x82, 0x74, 0xc0, 0x3c, 0xe5, 0x0b,
	0x85, 0x55, 0x2e, 0xc9, 0x43, 0x68, 0x9e, 0xb1, 0xe9, 0x9c, 0x23, 0x4e, 0x7b, 0xff, 0x9a, 0x0a,
	0xd6, 0x0d, 0xc3, 0x8c, 0xe7, 0x79, 0xef, 0x42, 0xf0, 0x24, 0xe4, 0x21, 0x2d, 0x9c, 0x1e, 0xad,
	0x7d, 0x61, 0xf8, 0x29, 0x6c, 0x2e, 0x59, 0xe5, 0x6e, 0x65, 0xf6, 0xfe, 0x13, 0x5d, 0x85, 0x39,
	0x4a, 0x64, 0x07, 0xec, 0x97, 0x6c, 0x3a, 0xe5, 0xa2, 0x9f, 0x84, 0xfc, 0x02, 0x53, 0x34, 0xa9,
	0x7d, 0x7e, 0xa9, 0x22, 0x3e, 0x38, 0x2a, 0x58, 0xe1, 0x62, 0xa2, 0x8b, 0xc3, 0x2a, 0x3a, 0xff,
	0x2e, 0x58, 0x94, 0xcf, 0xa6, 0x8b, 0x7e, 0xf2, 0x3a, 0x95, 0x25, 0x8a, 0x79, 0x9e, 0xb3, 0x37,
	0x5c, 0xe5, 0xd2, 0xa2, 0xff, 0x8b, 0x01, 0xce, 0x4b, 0x26, 0x82, 0x13, 0x15, 0x50, 0xba, 0xaa,
	0x38, 0xda, 0x55, 0x89, 0x12, 0x6f, 0x81, 0x50, 0x77, 0x67, 0x35, 0x5e, 0xf3, 0x6a, 0xbc, 0x8d,
	0x15, 0x78, 0x7f, 0x06, 0xfb, 0x70, 0x9a, 0x06, 0xa7, 0xdf, 0xf2, 0xe8, 0xcd, 0x89, 0x20, 0x77,
	0xa0, 0x7d, 0xc2, 0x59, 0x38, 0x9e, 0x48, 0xdd, 0x38, 0x99, 0xc7, 0x88, 0xc6, 0xa5, 0x8e, 0xd4,
	0xa2, 0xe3, 0x60, 0x1e, 0x13, 0x1f, 0xdc, 0x8a, 0x57, 0x14, 0x2a, 0x64, 0x76, 0xe9, 0xd4, 0x0f,
	0xc9, 0x3d, 0xd8, 0xac, 0xf8, 0x94, 0x14, 0x32, 0xa9, 0x5b, 0x7a, 0x8d, 0xa2, 0x98, 0xfb, 0x0f,
	0xca, 0x0e, 0x8d, 0x52, 0xca, 0xf3, 0x45, 0x12, 0xbc, 0xbd, 0x16, 0xfe, 0x6d, 0xd8, 0x38, 0x64,
	0x53, 0x96, 0x04, 0x48, 0x3f, 0xb5, 0xd4, 0x4e, 0x93, 0x42, 0xf4, 0x3f, 0x82, 0x26, 0x65, 0xe7,
	0xa3, 0x0b, 0x59, 0x21, 0x91, 0xb1, 0x24, 0x67, 0x81, 0x88, 0xd2, 0x04, 0xdd, 0x1c, 0x5a, 0x55,
	0xf9, 0x07, 0x00, 0x43, 0x9e, 0x84, 0xa3, 0x0b, 0xca, 0xf3, 0x19, 0xb9, 0x0b, 0xed, 0x8a, 0x51,
	0xee, 0xab, 0x88, 0xec, 0x56, 0xb4, 0xfd, 0xd0, 0xff, 0xd3, 0x84, 0xf5, 0x2e, 0x0a, 0xff, 0x2f,
	0x97, 0xc8, 0x3d, 0x68, 0x88, 0xc5, 0x8c, 0x63, 0xdf, 0xda, 0xfb, 0x44, 0xb3, 0x1d, 0x53, 0xef,
	0x8e, 0x16, 0x33, 0x4e, 0xd1, 0x4e, 0x08, 0x34, 0x5e, 0x67, 0x69, 0xec, 0x35, 0x11, 0x03, 0xae,
	0x49, 0x1b, 0xd6, 0x44, 0xea, 0xad, 0xa3, 0x66, 0x4d, 0xa4, 0xe4, 0x0e, 0xac, 0xb3, 0x38, 0x9d,
	0x27, 0xc2, 0xdb, 0xc0, 0xb3, 0xe3, 0xe8, 0x68, 0x79, 0xce, 0x05, 0x55, 0x36, 0x19, 0x29, 0xe6,
	0x71, 0xea, 0xb5, 0x8a, 0x48, 0x72, 0x2d, 0xf7, 0x98, 0x61, 0x5f, 0x3c, 0x6b, 0xc7, 0xb8, 0xdf,
	0xa2, 0x4a, 0x5a, 0x51, 0x2d, 0xc0, 0x02, 0xd7, 0xab, 0x45, 0x3e, 0x04, 0x47, 0x7b, 0xe0, 0x46,
	0x6d, 0x24, 0x81, 0xad, 0xec, 0xb8, 0xcf, 0x4a, 0xbf, 0x9d, 0x3a, 0xf7, 0x6f, 0x80, 0x75, 0xc9,
	0x44, 0x17, 0x99, 0xd8, 0x9a, 0x68, 0x16, 0xde, 0x02, 0xa8, 0x90, 0xab, 0x8d, 0x71, 0x0b, 0x77,
	0x24, 0xd6, 0x2b, 0x68, 0x8c, 0x8a, 0xea, 0xb4, 0x47, 0xb4, 0x3b, 0x18, 0x7e, 0xd3, 0xa3, 0xe3,
	0xd1, 0xf7, 0x4f, 0x7b, 0x83, 0xce, 0x3b, 0x64, 0x13, 0xec, 0xfe, 0x70, 0x78, 0xdc, 0x53, 0x0a,
	0x83, 0x6c, 0x81, 0x7b, 0x78, 0xfc, 0x6a, 0x4c, 0xbb, 0xcf, 0xc7, 0x87, 0xaf, 0x46, 0xbd, 0x61,
	0x67, 0x8d, 0xd8, 0xb0, 0xa1, 0x54, 0x1d, 0x93, 0x38, 0xd0, 0x1a, 0xf6, 0x9e, 0x3d, 0x43, 0xa9,
	0xe1, 0x53, 0x00, 0xc5, 0x3d, 0xca, 0x7f, 0x44, 0xf8, 0x41, 0x80, 0xb5, 0xd5, 0x74, 0x2d, 0x44,
	0x59, 0xba, 0x7c, 0x11, 0x4f, 0xd2, 0xa9, 0x3e, 0xba, 0x85, 0x24, 0xcb, 0x1c, 0xa4, 0xa1, 0xbe,
	0x53, 0x71, 0xed, 0xdf, 0x82, 0x8d, 0xae, 0xfa, 0x8d, 0x40, 0x23, 0x61, 0xb1, 0xe6, 0x35, 0xae,
	0xfd, 0x63, 0x68, 0x62, 0xab, 0x64, 0x4c, 0xd5, 0x48, 0x03, 0x77, 0xac, 0x5b, 0x77, 0x13, 0xac,
	0x59, 0xc6, 0x83, 0x48, 0xde, 0xf4, 0x98, 0xce, 0xa5, 0x97, 0x8a, 0x0a, 0x12, 0xb3, 0x8a, 0xc4,
	0xff, 0xcd, 0x80, 0x8e, 0x4a, 0xfb, 0x38, 0xe3, 0x4c, 0xe0, 0x86, 0x56, 0xe4, 0x97, 0xc5, 0x96,
	0x2d, 0x3b, 0xe3, 0x63, 0x79, 0x27, 0x17, 0xdb, 0xb1, 0x0a, 0xcd, 0x53, 0xbe, 0x90, 0x8d, 0x4a,
	0xcf, 0x13, 0x9e, 0xa1, 0xb5, 0x48, 0xd1, 0x42, 0x85, 0x34, 0x76, 0xc0, 0xcc, 0x58, 0x8c, 0x34,
	0x6e, 0x50, 0xb9, 0x94, 0x9a, 0x60, 0x36, 0x47, 0xc2, 0x9a, 0x54, 0x2e, 0xa5, 0x26, 0xe1, 0x02,
	0x09, 0x6b, 0x52, 0xb9, 0xf4, 0x7f, 0x02, 0x5b, 0x21, 0xc3, 0xbb, 0xf4, 0x3d, 0x68, 0xf2, 0x8b,
	0x28, 0x2f, 0xb6, 0xdd, 0xa2, 0x85, 0x20, 0x61, 0xcd, 0xe6, 0x93, 0x69, 0x14, 0x54, 0x61, 0x15,
	0x9a, 0x2b, 0x61, 0xd5, 0xb7, 0xd4, 0x58, 0xda, 0x92, 0xbf, 0x03, 0x2d, 0xda, 0x7d, 0xfe, 0x22,
	0x8b, 0x02, 0x2e, 0x93, 0xcf, 0xe4, 0x02, 0x93, 0x1b, 0xb4, 0x10, 0xfc, 0xef, 0xa0, 0xa5, 0x68,
	0x90, 0xff, 0x03, 0x09, 0xe4, 0xc9, 0x93, 0x9d, 0xcb, 0xbd, 0x35, 0x1c, 0x81, 0xcb, 0x27, 0x0f,
	0x6d, 0xfe, 0x1f, 0x06, 0xc0, 0xe3, 0x13, 0x16, 0x25, 0x43, 0xc1, 0x04, 0xff, 0x2f, 0xf7, 0xb0,
	0xf3, 0xaf, 0xee, 0x61, 0xf2, 0x35, 0xdc, 0x90, 0xf3, 0x7b, 0x1c, 0x65, 0x19, 0x3f, 0x93, 0x0f,
	0x86, 0xc9, 0x94, 0x57, 0xd2, 0x37, 0x30, 0xbd, 0x27, 0x5d, 0xfa, 0x15, 0x8f, 0x12, 0xca, 0x57,
	0xb0, 0xfd, 0xb6, 0xdf, 0xa3, 0x10, 0x1b, 0xed, 0xd0, 0xeb, 0x2b, 0xff, 0xee, 0x87, 0xfe, 0x27,
	0xd0, 0x52, 0xad, 0xce, 0xc9, 0x6d, 0x70, 0x55, 0xe5, 0xc6, 0x92, 0x78, 0x39, 0x3e, 0x1c, 0x2c,
	0xea, 0x28, 0xe5, 0x40, 0xea, 0xfc, 0x8f, 0xc1, 0x7a, 0x51, 0x36, 0xb9, 0xce, 0x01, 0x63, 0x89,
	0x03, 0xfb, 0xbf, 0xaf, 0x03, 0x19, 0xa4, 0x21, 0x7f, 0x9c, 0xc6, 0xf1, 0x3c, 0x89, 0x02, 0x26,
	0x2f, 0x9e, 0x9c, 0xec, 0x83, 0xad, 0x9e, 0x47, 0x48, 0x2f, 0xdd, 0x15, 0x7c, 0x3b, 0x6d, 0xbf,
	0xaf, 0xa4, 0xa5, 0x07, 0xd4, 0x1e, 0x40, 0x3f, 0x89, 0x44, 0xc4, 0xa6, 0xdd, 0x30, 0x24, 0x9d,
	0xe5, 0xb7, 0xcc, 0xb6, 0xd6, 0x5c, 0xbe, 0x00, 0x3e, 0x07, 0xb7, 0x1b, 0x86, 0x03, 0x7e, 0xae,
	0xe7, 0xfc, 0xbb, 0xca, 0xa5, 0x3a, 0xfc, 0x57, 0xfc, 0xb7, 0x0f, 0xed, 0x23, 0x2e, 0xaa, 0x93,
	0xb9, 0x0e, 0x50, 0x0f, 0x83, 0xaa, 0xc7, 0x01, 0x6c, 0x1d, 0x71, 0xa1, 0x62, 0xea, 0x31, 0xd9,
	0x2e, 0xa7, 0x06, 0x96, 0x6f, 0x5b, 0xcb, 0xda, 0xfe, 0x25, 0xb8, 0xc5, 0xd4, 0xd5, 0x00, 0x97,
	0x1e, 0x55, 0x7a, 0x28, 0xaf, 0xc0, 0xb8, 0x0b, 0xad, 0x01, 0x3f, 0x47, 0x04, 0x57, 0xa3, 0xdb,
	0x33, 0xc8, 0x43, 0xb0, 0xe4, 0xb0, 0x2d, 0x66, 0xb3, 0xfe, 0x01, 0xa5, 0xed, 0xad, 0xb2, 0xde,
	0xe5, 0x30, 0xbe, 0x07, 0xcd, 0x01, 0xaf, 0x7a, 0x16, 0xa1, 0xdd, 0xda, 0x14, 0xdc, 0x33, 0xc8,
	0xa7, 0x60, 0x0d, 0x17, 0x49, 0x50, 0x1c, 0x9b, 0x15, 0x89, 0x57, 0x00, 0xdf, 0x03, 0xf7, 0x88,
	0x8b, 0xca, 0x69, 0xab, 0xa7, 0xd0, 0x60, 0x2a, 0x0e, 0x8f, 0xc0, 0xad, 0xdd, 0x92, 0xe4, 0x7a,
	0xbd, 0xac, 0xe5, 0xdd, 0xb9, 0xb2, 0x95, 0x8e, 0xf6, 0x3a, 0xe1, 0xc1, 0xe9, 0xdf, 0x3a, 0x42,
	0xea, 0x32, 0xfe, 0xf3, 0x10, 0xec, 0x23, 0x2e, 0xca, 0xeb, 0xa7, 0x8e, 0x6f, 0x53, 0xa7, 0xd0,
	0xe6, 0xcf, 0x60, 0xf3, 0x88, 0x8b, 0x51, 0x7a, 0xca, 0x13, 0xdd, 0xd6, 0xad, 0x7a, 0x9b, 0x25,
	0xb2, 0xcd, 0xba, 0x2a, 0x27, 0x07, 0xc8, 0xb1, 0xa7, 0x7c, 0x51, 0x9e, 0x3d, 0x0d, 0xbe, 0x3c,
	0x5b, 0xe5, 0x4f, 0xda, 0x65, 0xb2, 0x8e, 0xf2, 0xc1, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xcb,
	0x20, 0xd5, 0xa2, 0x79, 0x0c, 0x00, 0x00,
}
