/*
 * Copyright 2018 Idealnaya rabota LLC
 * Licensed under Multy.io license.
 * See LICENSE for details
 */

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: eos.proto

/*
Package proto is a generated protocol buffer package.

based on https://github.com/Appscrunch/Multy-back/

It is generated from these files:
	eos.proto

It has these top-level messages:
	Empty
	ServiceVersion
	UsersData
	AddressExtended
	ReplyInfo
	WatchAddress
	BlockHeight
	AddressToResync
	Balance
	RawTx
	SendTxResp
	EOSAction
	BalanceReq
	Account
	Asset
	AccountCreateReq
	Exist
	RAMPrice
	Balances
	ChainState
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type EOSAction_Type int32

const (
	EOSAction_TRANSFER_TOKEN EOSAction_Type = 0
	EOSAction_ISSUE_TOKEN    EOSAction_Type = 1
	EOSAction_BUY_RAM_BYTES  EOSAction_Type = 2
	EOSAction_BUY_RAM        EOSAction_Type = 3
	EOSAction_SELL_RAM       EOSAction_Type = 4
)

var EOSAction_Type_name = map[int32]string{
	0: "TRANSFER_TOKEN",
	1: "ISSUE_TOKEN",
	2: "BUY_RAM_BYTES",
	3: "BUY_RAM",
	4: "SELL_RAM",
}
var EOSAction_Type_value = map[string]int32{
	"TRANSFER_TOKEN": 0,
	"ISSUE_TOKEN":    1,
	"BUY_RAM_BYTES":  2,
	"BUY_RAM":        3,
	"SELL_RAM":       4,
}

func (x EOSAction_Type) String() string {
	return proto1.EnumName(EOSAction_Type_name, int32(x))
}
func (EOSAction_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{11, 0} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto1.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ServiceVersion struct {
	Branch    string `protobuf:"bytes,1,opt,name=branch" json:"branch,omitempty"`
	Commit    string `protobuf:"bytes,2,opt,name=commit" json:"commit,omitempty"`
	Buildtime string `protobuf:"bytes,3,opt,name=buildtime" json:"buildtime,omitempty"`
	Lasttag   string `protobuf:"bytes,4,opt,name=lasttag" json:"lasttag,omitempty"`
}

func (m *ServiceVersion) Reset()                    { *m = ServiceVersion{} }
func (m *ServiceVersion) String() string            { return proto1.CompactTextString(m) }
func (*ServiceVersion) ProtoMessage()               {}
func (*ServiceVersion) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ServiceVersion) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *ServiceVersion) GetCommit() string {
	if m != nil {
		return m.Commit
	}
	return ""
}

func (m *ServiceVersion) GetBuildtime() string {
	if m != nil {
		return m.Buildtime
	}
	return ""
}

func (m *ServiceVersion) GetLasttag() string {
	if m != nil {
		return m.Lasttag
	}
	return ""
}

type UsersData struct {
	Map map[string]*AddressExtended `protobuf:"bytes,1,rep,name=map" json:"map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *UsersData) Reset()                    { *m = UsersData{} }
func (m *UsersData) String() string            { return proto1.CompactTextString(m) }
func (*UsersData) ProtoMessage()               {}
func (*UsersData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UsersData) GetMap() map[string]*AddressExtended {
	if m != nil {
		return m.Map
	}
	return nil
}

type AddressExtended struct {
	UserID       string `protobuf:"bytes,1,opt,name=UserID,json=userID" json:"UserID,omitempty"`
	WalletIndex  int32  `protobuf:"varint,2,opt,name=WalletIndex,json=walletIndex" json:"WalletIndex,omitempty"`
	AddressIndex int32  `protobuf:"varint,3,opt,name=AddressIndex,json=addressIndex" json:"AddressIndex,omitempty"`
}

func (m *AddressExtended) Reset()                    { *m = AddressExtended{} }
func (m *AddressExtended) String() string            { return proto1.CompactTextString(m) }
func (*AddressExtended) ProtoMessage()               {}
func (*AddressExtended) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AddressExtended) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *AddressExtended) GetWalletIndex() int32 {
	if m != nil {
		return m.WalletIndex
	}
	return 0
}

func (m *AddressExtended) GetAddressIndex() int32 {
	if m != nil {
		return m.AddressIndex
	}
	return 0
}

type ReplyInfo struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *ReplyInfo) Reset()                    { *m = ReplyInfo{} }
func (m *ReplyInfo) String() string            { return proto1.CompactTextString(m) }
func (*ReplyInfo) ProtoMessage()               {}
func (*ReplyInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ReplyInfo) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type WatchAddress struct {
	Address      string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	UserID       string `protobuf:"bytes,2,opt,name=userID" json:"userID,omitempty"`
	WalletIndex  int32  `protobuf:"varint,3,opt,name=WalletIndex,json=walletIndex" json:"WalletIndex,omitempty"`
	AddressIndex int32  `protobuf:"varint,4,opt,name=AddressIndex,json=addressIndex" json:"AddressIndex,omitempty"`
}

func (m *WatchAddress) Reset()                    { *m = WatchAddress{} }
func (m *WatchAddress) String() string            { return proto1.CompactTextString(m) }
func (*WatchAddress) ProtoMessage()               {}
func (*WatchAddress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *WatchAddress) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *WatchAddress) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *WatchAddress) GetWalletIndex() int32 {
	if m != nil {
		return m.WalletIndex
	}
	return 0
}

func (m *WatchAddress) GetAddressIndex() int32 {
	if m != nil {
		return m.AddressIndex
	}
	return 0
}

type BlockHeight struct {
	HeadBlockNum uint32 `protobuf:"varint,1,opt,name=head_block_num,json=headBlockNum" json:"head_block_num,omitempty"`
	HeadBlockId  string `protobuf:"bytes,2,opt,name=head_block_id,json=headBlockId" json:"head_block_id,omitempty"`
}

func (m *BlockHeight) Reset()                    { *m = BlockHeight{} }
func (m *BlockHeight) String() string            { return proto1.CompactTextString(m) }
func (*BlockHeight) ProtoMessage()               {}
func (*BlockHeight) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *BlockHeight) GetHeadBlockNum() uint32 {
	if m != nil {
		return m.HeadBlockNum
	}
	return 0
}

func (m *BlockHeight) GetHeadBlockId() string {
	if m != nil {
		return m.HeadBlockId
	}
	return ""
}

type AddressToResync struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
}

func (m *AddressToResync) Reset()                    { *m = AddressToResync{} }
func (m *AddressToResync) String() string            { return proto1.CompactTextString(m) }
func (*AddressToResync) ProtoMessage()               {}
func (*AddressToResync) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *AddressToResync) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type Balance struct {
	Balance string `protobuf:"bytes,1,opt,name=Balance,json=balance" json:"Balance,omitempty"`
}

func (m *Balance) Reset()                    { *m = Balance{} }
func (m *Balance) String() string            { return proto1.CompactTextString(m) }
func (*Balance) ProtoMessage()               {}
func (*Balance) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Balance) GetBalance() string {
	if m != nil {
		return m.Balance
	}
	return ""
}

type RawTx struct {
	Transaction []byte `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (m *RawTx) Reset()                    { *m = RawTx{} }
func (m *RawTx) String() string            { return proto1.CompactTextString(m) }
func (*RawTx) ProtoMessage()               {}
func (*RawTx) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *RawTx) GetTransaction() []byte {
	if m != nil {
		return m.Transaction
	}
	return nil
}

type SendTxResp struct {
	TransactionId string `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId" json:"transaction_id,omitempty"`
}

func (m *SendTxResp) Reset()                    { *m = SendTxResp{} }
func (m *SendTxResp) String() string            { return proto1.CompactTextString(m) }
func (*SendTxResp) ProtoMessage()               {}
func (*SendTxResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *SendTxResp) GetTransactionId() string {
	if m != nil {
		return m.TransactionId
	}
	return ""
}

type EOSAction struct {
	UserID       string         `protobuf:"bytes,1,opt,name=UserID,json=userID" json:"UserID,omitempty"`
	WalletIndex  int32          `protobuf:"varint,2,opt,name=WalletIndex,json=walletIndex" json:"WalletIndex,omitempty"`
	AddressIndex int32          `protobuf:"varint,3,opt,name=AddressIndex,json=addressIndex" json:"AddressIndex,omitempty"`
	Type         EOSAction_Type `protobuf:"varint,4,opt,name=type,enum=proto.EOSAction_Type" json:"type,omitempty"`
	From         string         `protobuf:"bytes,5,opt,name=from" json:"from,omitempty"`
	To           string         `protobuf:"bytes,6,opt,name=to" json:"to,omitempty"`
	Amount       *Asset         `protobuf:"bytes,7,opt,name=amount" json:"amount,omitempty"`
	Memo         string         `protobuf:"bytes,8,opt,name=memo" json:"memo,omitempty"`
	Resync       bool           `protobuf:"varint,9,opt,name=resync" json:"resync,omitempty"`
}

func (m *EOSAction) Reset()                    { *m = EOSAction{} }
func (m *EOSAction) String() string            { return proto1.CompactTextString(m) }
func (*EOSAction) ProtoMessage()               {}
func (*EOSAction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *EOSAction) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *EOSAction) GetWalletIndex() int32 {
	if m != nil {
		return m.WalletIndex
	}
	return 0
}

func (m *EOSAction) GetAddressIndex() int32 {
	if m != nil {
		return m.AddressIndex
	}
	return 0
}

func (m *EOSAction) GetType() EOSAction_Type {
	if m != nil {
		return m.Type
	}
	return EOSAction_TRANSFER_TOKEN
}

func (m *EOSAction) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *EOSAction) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *EOSAction) GetAmount() *Asset {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *EOSAction) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *EOSAction) GetResync() bool {
	if m != nil {
		return m.Resync
	}
	return false
}

type BalanceReq struct {
	Account string `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	Symbol  string `protobuf:"bytes,2,opt,name=symbol" json:"symbol,omitempty"`
	Code    string `protobuf:"bytes,3,opt,name=code" json:"code,omitempty"`
}

func (m *BalanceReq) Reset()                    { *m = BalanceReq{} }
func (m *BalanceReq) String() string            { return proto1.CompactTextString(m) }
func (*BalanceReq) ProtoMessage()               {}
func (*BalanceReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *BalanceReq) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *BalanceReq) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *BalanceReq) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

type Account struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Account) Reset()                    { *m = Account{} }
func (m *Account) String() string            { return proto1.CompactTextString(m) }
func (*Account) ProtoMessage()               {}
func (*Account) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Account) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Asset struct {
	Ammount   int64  `protobuf:"varint,1,opt,name=ammount" json:"ammount,omitempty"`
	Precision uint32 `protobuf:"varint,2,opt,name=precision" json:"precision,omitempty"`
	Symbol    string `protobuf:"bytes,3,opt,name=symbol" json:"symbol,omitempty"`
}

func (m *Asset) Reset()                    { *m = Asset{} }
func (m *Asset) String() string            { return proto1.CompactTextString(m) }
func (*Asset) ProtoMessage()               {}
func (*Asset) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Asset) GetAmmount() int64 {
	if m != nil {
		return m.Ammount
	}
	return 0
}

func (m *Asset) GetPrecision() uint32 {
	if m != nil {
		return m.Precision
	}
	return 0
}

func (m *Asset) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

type AccountCreateReq struct {
	Name      string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	ActiveKey string `protobuf:"bytes,2,opt,name=active_key,json=activeKey" json:"active_key,omitempty"`
	OwnerKey  string `protobuf:"bytes,3,opt,name=owner_key,json=ownerKey" json:"owner_key,omitempty"`
	RamCost   uint64 `protobuf:"varint,4,opt,name=ram_cost,json=ramCost" json:"ram_cost,omitempty"`
}

func (m *AccountCreateReq) Reset()                    { *m = AccountCreateReq{} }
func (m *AccountCreateReq) String() string            { return proto1.CompactTextString(m) }
func (*AccountCreateReq) ProtoMessage()               {}
func (*AccountCreateReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *AccountCreateReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AccountCreateReq) GetActiveKey() string {
	if m != nil {
		return m.ActiveKey
	}
	return ""
}

func (m *AccountCreateReq) GetOwnerKey() string {
	if m != nil {
		return m.OwnerKey
	}
	return ""
}

func (m *AccountCreateReq) GetRamCost() uint64 {
	if m != nil {
		return m.RamCost
	}
	return 0
}

type Exist struct {
	Exist bool `protobuf:"varint,1,opt,name=exist" json:"exist,omitempty"`
}

func (m *Exist) Reset()                    { *m = Exist{} }
func (m *Exist) String() string            { return proto1.CompactTextString(m) }
func (*Exist) ProtoMessage()               {}
func (*Exist) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *Exist) GetExist() bool {
	if m != nil {
		return m.Exist
	}
	return false
}

type RAMPrice struct {
	Price float64 `protobuf:"fixed64,1,opt,name=price" json:"price,omitempty"`
}

func (m *RAMPrice) Reset()                    { *m = RAMPrice{} }
func (m *RAMPrice) String() string            { return proto1.CompactTextString(m) }
func (*RAMPrice) ProtoMessage()               {}
func (*RAMPrice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *RAMPrice) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

type Balances struct {
	Account string   `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	Assets  []*Asset `protobuf:"bytes,2,rep,name=assets" json:"assets,omitempty"`
}

func (m *Balances) Reset()                    { *m = Balances{} }
func (m *Balances) String() string            { return proto1.CompactTextString(m) }
func (*Balances) ProtoMessage()               {}
func (*Balances) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *Balances) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *Balances) GetAssets() []*Asset {
	if m != nil {
		return m.Assets
	}
	return nil
}

type ChainState struct {
	HeadBlockNum             uint32 `protobuf:"varint,1,opt,name=head_block_num,json=headBlockNum" json:"head_block_num,omitempty"`
	HeadBlockId              []byte `protobuf:"bytes,2,opt,name=head_block_id,json=headBlockId,proto3" json:"head_block_id,omitempty"`
	HeadBlockTime            int64  `protobuf:"varint,3,opt,name=head_block_time,json=headBlockTime" json:"head_block_time,omitempty"`
	LastIrreversibleBlockNum uint32 `protobuf:"varint,4,opt,name=last_irreversible_block_num,json=lastIrreversibleBlockNum" json:"last_irreversible_block_num,omitempty"`
	LastIrreversibleBlockId  []byte `protobuf:"bytes,5,opt,name=last_irreversible_block_id,json=lastIrreversibleBlockId,proto3" json:"last_irreversible_block_id,omitempty"`
}

func (m *ChainState) Reset()                    { *m = ChainState{} }
func (m *ChainState) String() string            { return proto1.CompactTextString(m) }
func (*ChainState) ProtoMessage()               {}
func (*ChainState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *ChainState) GetHeadBlockNum() uint32 {
	if m != nil {
		return m.HeadBlockNum
	}
	return 0
}

func (m *ChainState) GetHeadBlockId() []byte {
	if m != nil {
		return m.HeadBlockId
	}
	return nil
}

func (m *ChainState) GetHeadBlockTime() int64 {
	if m != nil {
		return m.HeadBlockTime
	}
	return 0
}

func (m *ChainState) GetLastIrreversibleBlockNum() uint32 {
	if m != nil {
		return m.LastIrreversibleBlockNum
	}
	return 0
}

func (m *ChainState) GetLastIrreversibleBlockId() []byte {
	if m != nil {
		return m.LastIrreversibleBlockId
	}
	return nil
}

func init() {
	proto1.RegisterType((*Empty)(nil), "proto.Empty")
	proto1.RegisterType((*ServiceVersion)(nil), "proto.ServiceVersion")
	proto1.RegisterType((*UsersData)(nil), "proto.UsersData")
	proto1.RegisterType((*AddressExtended)(nil), "proto.AddressExtended")
	proto1.RegisterType((*ReplyInfo)(nil), "proto.ReplyInfo")
	proto1.RegisterType((*WatchAddress)(nil), "proto.WatchAddress")
	proto1.RegisterType((*BlockHeight)(nil), "proto.BlockHeight")
	proto1.RegisterType((*AddressToResync)(nil), "proto.AddressToResync")
	proto1.RegisterType((*Balance)(nil), "proto.Balance")
	proto1.RegisterType((*RawTx)(nil), "proto.RawTx")
	proto1.RegisterType((*SendTxResp)(nil), "proto.SendTxResp")
	proto1.RegisterType((*EOSAction)(nil), "proto.EOSAction")
	proto1.RegisterType((*BalanceReq)(nil), "proto.BalanceReq")
	proto1.RegisterType((*Account)(nil), "proto.Account")
	proto1.RegisterType((*Asset)(nil), "proto.Asset")
	proto1.RegisterType((*AccountCreateReq)(nil), "proto.AccountCreateReq")
	proto1.RegisterType((*Exist)(nil), "proto.Exist")
	proto1.RegisterType((*RAMPrice)(nil), "proto.RAMPrice")
	proto1.RegisterType((*Balances)(nil), "proto.Balances")
	proto1.RegisterType((*ChainState)(nil), "proto.ChainState")
	proto1.RegisterEnum("proto.EOSAction_Type", EOSAction_Type_name, EOSAction_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NodeCommunications service

type NodeCommunicationsClient interface {
	// ServiceInfo gets node service build info
	ServiceInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServiceVersion, error)
	// EventInitialAdd initializes tracked users
	EventInitialAdd(ctx context.Context, in *UsersData, opts ...grpc.CallOption) (*ReplyInfo, error)
	// EventAddNewAddress add address for tracking
	EventAddNewAddress(ctx context.Context, in *WatchAddress, opts ...grpc.CallOption) (*ReplyInfo, error)
	// EventGetBlockHeight gets head block height
	// (and additional info on chain state)
	EventGetBlockHeight(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BlockHeight, error)
	// EventGetAdressBalance get EOS token balance
	// made for API compability
	EventGetAddressBalance(ctx context.Context, in *AddressToResync, opts ...grpc.CallOption) (*Balance, error)
	// EventResyncAddress resyncs account action history
	// Actions are pushed to NewTx stream
	EventResyncAddress(ctx context.Context, in *AddressToResync, opts ...grpc.CallOption) (*ReplyInfo, error)
	// EventNewBlock streams new block's info
	EventNewBlock(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommunications_EventNewBlockClient, error)
	// EventSendRawTx pushes transaction to chain
	EventSendRawTx(ctx context.Context, in *RawTx, opts ...grpc.CallOption) (*SendTxResp, error)
	// NewTx streams new actions data
	NewTx(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommunications_NewTxClient, error)
	// SyncState all the tracked account actions
	// starts with BlockHeight
	SyncState(ctx context.Context, in *BlockHeight, opts ...grpc.CallOption) (*ReplyInfo, error)
	// GetChainState gets current blockchain state info
	GetChainState(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ChainState, error)
	// AccountCreate creates account if cost is right
	AccountCreate(ctx context.Context, in *AccountCreateReq, opts ...grpc.CallOption) (*ReplyInfo, error)
	// AccountCheck checks if account exists.
	AccountCheck(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Exist, error)
	// GetRAMPrice get actual RAM price using rammarket
	GetRAMPrice(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RAMPrice, error)
	// GetTokenBalance get balance for smart contract's token
	GetTokenBalance(ctx context.Context, in *BalanceReq, opts ...grpc.CallOption) (*Balances, error)
}

type nodeCommunicationsClient struct {
	cc *grpc.ClientConn
}

func NewNodeCommunicationsClient(cc *grpc.ClientConn) NodeCommunicationsClient {
	return &nodeCommunicationsClient{cc}
}

func (c *nodeCommunicationsClient) ServiceInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServiceVersion, error) {
	out := new(ServiceVersion)
	err := grpc.Invoke(ctx, "/proto.NodeCommunications/ServiceInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommunicationsClient) EventInitialAdd(ctx context.Context, in *UsersData, opts ...grpc.CallOption) (*ReplyInfo, error) {
	out := new(ReplyInfo)
	err := grpc.Invoke(ctx, "/proto.NodeCommunications/EventInitialAdd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommunicationsClient) EventAddNewAddress(ctx context.Context, in *WatchAddress, opts ...grpc.CallOption) (*ReplyInfo, error) {
	out := new(ReplyInfo)
	err := grpc.Invoke(ctx, "/proto.NodeCommunications/EventAddNewAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommunicationsClient) EventGetBlockHeight(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BlockHeight, error) {
	out := new(BlockHeight)
	err := grpc.Invoke(ctx, "/proto.NodeCommunications/EventGetBlockHeight", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommunicationsClient) EventGetAddressBalance(ctx context.Context, in *AddressToResync, opts ...grpc.CallOption) (*Balance, error) {
	out := new(Balance)
	err := grpc.Invoke(ctx, "/proto.NodeCommunications/EventGetAddressBalance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommunicationsClient) EventResyncAddress(ctx context.Context, in *AddressToResync, opts ...grpc.CallOption) (*ReplyInfo, error) {
	out := new(ReplyInfo)
	err := grpc.Invoke(ctx, "/proto.NodeCommunications/EventResyncAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommunicationsClient) EventNewBlock(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommunications_EventNewBlockClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NodeCommunications_serviceDesc.Streams[0], c.cc, "/proto.NodeCommunications/EventNewBlock", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeCommunicationsEventNewBlockClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeCommunications_EventNewBlockClient interface {
	Recv() (*BlockHeight, error)
	grpc.ClientStream
}

type nodeCommunicationsEventNewBlockClient struct {
	grpc.ClientStream
}

func (x *nodeCommunicationsEventNewBlockClient) Recv() (*BlockHeight, error) {
	m := new(BlockHeight)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeCommunicationsClient) EventSendRawTx(ctx context.Context, in *RawTx, opts ...grpc.CallOption) (*SendTxResp, error) {
	out := new(SendTxResp)
	err := grpc.Invoke(ctx, "/proto.NodeCommunications/EventSendRawTx", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommunicationsClient) NewTx(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommunications_NewTxClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NodeCommunications_serviceDesc.Streams[1], c.cc, "/proto.NodeCommunications/NewTx", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeCommunicationsNewTxClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeCommunications_NewTxClient interface {
	Recv() (*EOSAction, error)
	grpc.ClientStream
}

type nodeCommunicationsNewTxClient struct {
	grpc.ClientStream
}

func (x *nodeCommunicationsNewTxClient) Recv() (*EOSAction, error) {
	m := new(EOSAction)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeCommunicationsClient) SyncState(ctx context.Context, in *BlockHeight, opts ...grpc.CallOption) (*ReplyInfo, error) {
	out := new(ReplyInfo)
	err := grpc.Invoke(ctx, "/proto.NodeCommunications/SyncState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommunicationsClient) GetChainState(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ChainState, error) {
	out := new(ChainState)
	err := grpc.Invoke(ctx, "/proto.NodeCommunications/GetChainState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommunicationsClient) AccountCreate(ctx context.Context, in *AccountCreateReq, opts ...grpc.CallOption) (*ReplyInfo, error) {
	out := new(ReplyInfo)
	err := grpc.Invoke(ctx, "/proto.NodeCommunications/AccountCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommunicationsClient) AccountCheck(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Exist, error) {
	out := new(Exist)
	err := grpc.Invoke(ctx, "/proto.NodeCommunications/AccountCheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommunicationsClient) GetRAMPrice(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RAMPrice, error) {
	out := new(RAMPrice)
	err := grpc.Invoke(ctx, "/proto.NodeCommunications/GetRAMPrice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommunicationsClient) GetTokenBalance(ctx context.Context, in *BalanceReq, opts ...grpc.CallOption) (*Balances, error) {
	out := new(Balances)
	err := grpc.Invoke(ctx, "/proto.NodeCommunications/GetTokenBalance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NodeCommunications service

type NodeCommunicationsServer interface {
	// ServiceInfo gets node service build info
	ServiceInfo(context.Context, *Empty) (*ServiceVersion, error)
	// EventInitialAdd initializes tracked users
	EventInitialAdd(context.Context, *UsersData) (*ReplyInfo, error)
	// EventAddNewAddress add address for tracking
	EventAddNewAddress(context.Context, *WatchAddress) (*ReplyInfo, error)
	// EventGetBlockHeight gets head block height
	// (and additional info on chain state)
	EventGetBlockHeight(context.Context, *Empty) (*BlockHeight, error)
	// EventGetAdressBalance get EOS token balance
	// made for API compability
	EventGetAddressBalance(context.Context, *AddressToResync) (*Balance, error)
	// EventResyncAddress resyncs account action history
	// Actions are pushed to NewTx stream
	EventResyncAddress(context.Context, *AddressToResync) (*ReplyInfo, error)
	// EventNewBlock streams new block's info
	EventNewBlock(*Empty, NodeCommunications_EventNewBlockServer) error
	// EventSendRawTx pushes transaction to chain
	EventSendRawTx(context.Context, *RawTx) (*SendTxResp, error)
	// NewTx streams new actions data
	NewTx(*Empty, NodeCommunications_NewTxServer) error
	// SyncState all the tracked account actions
	// starts with BlockHeight
	SyncState(context.Context, *BlockHeight) (*ReplyInfo, error)
	// GetChainState gets current blockchain state info
	GetChainState(context.Context, *Empty) (*ChainState, error)
	// AccountCreate creates account if cost is right
	AccountCreate(context.Context, *AccountCreateReq) (*ReplyInfo, error)
	// AccountCheck checks if account exists.
	AccountCheck(context.Context, *Account) (*Exist, error)
	// GetRAMPrice get actual RAM price using rammarket
	GetRAMPrice(context.Context, *Empty) (*RAMPrice, error)
	// GetTokenBalance get balance for smart contract's token
	GetTokenBalance(context.Context, *BalanceReq) (*Balances, error)
}

func RegisterNodeCommunicationsServer(s *grpc.Server, srv NodeCommunicationsServer) {
	s.RegisterService(&_NodeCommunications_serviceDesc, srv)
}

func _NodeCommunications_ServiceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommunicationsServer).ServiceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NodeCommunications/ServiceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommunicationsServer).ServiceInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommunications_EventInitialAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommunicationsServer).EventInitialAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NodeCommunications/EventInitialAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommunicationsServer).EventInitialAdd(ctx, req.(*UsersData))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommunications_EventAddNewAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommunicationsServer).EventAddNewAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NodeCommunications/EventAddNewAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommunicationsServer).EventAddNewAddress(ctx, req.(*WatchAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommunications_EventGetBlockHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommunicationsServer).EventGetBlockHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NodeCommunications/EventGetBlockHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommunicationsServer).EventGetBlockHeight(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommunications_EventGetAddressBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressToResync)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommunicationsServer).EventGetAddressBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NodeCommunications/EventGetAddressBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommunicationsServer).EventGetAddressBalance(ctx, req.(*AddressToResync))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommunications_EventResyncAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressToResync)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommunicationsServer).EventResyncAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NodeCommunications/EventResyncAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommunicationsServer).EventResyncAddress(ctx, req.(*AddressToResync))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommunications_EventNewBlock_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeCommunicationsServer).EventNewBlock(m, &nodeCommunicationsEventNewBlockServer{stream})
}

type NodeCommunications_EventNewBlockServer interface {
	Send(*BlockHeight) error
	grpc.ServerStream
}

type nodeCommunicationsEventNewBlockServer struct {
	grpc.ServerStream
}

func (x *nodeCommunicationsEventNewBlockServer) Send(m *BlockHeight) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeCommunications_EventSendRawTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommunicationsServer).EventSendRawTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NodeCommunications/EventSendRawTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommunicationsServer).EventSendRawTx(ctx, req.(*RawTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommunications_NewTx_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeCommunicationsServer).NewTx(m, &nodeCommunicationsNewTxServer{stream})
}

type NodeCommunications_NewTxServer interface {
	Send(*EOSAction) error
	grpc.ServerStream
}

type nodeCommunicationsNewTxServer struct {
	grpc.ServerStream
}

func (x *nodeCommunicationsNewTxServer) Send(m *EOSAction) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeCommunications_SyncState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockHeight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommunicationsServer).SyncState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NodeCommunications/SyncState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommunicationsServer).SyncState(ctx, req.(*BlockHeight))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommunications_GetChainState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommunicationsServer).GetChainState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NodeCommunications/GetChainState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommunicationsServer).GetChainState(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommunications_AccountCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommunicationsServer).AccountCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NodeCommunications/AccountCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommunicationsServer).AccountCreate(ctx, req.(*AccountCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommunications_AccountCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommunicationsServer).AccountCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NodeCommunications/AccountCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommunicationsServer).AccountCheck(ctx, req.(*Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommunications_GetRAMPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommunicationsServer).GetRAMPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NodeCommunications/GetRAMPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommunicationsServer).GetRAMPrice(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommunications_GetTokenBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommunicationsServer).GetTokenBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NodeCommunications/GetTokenBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommunicationsServer).GetTokenBalance(ctx, req.(*BalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeCommunications_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.NodeCommunications",
	HandlerType: (*NodeCommunicationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ServiceInfo",
			Handler:    _NodeCommunications_ServiceInfo_Handler,
		},
		{
			MethodName: "EventInitialAdd",
			Handler:    _NodeCommunications_EventInitialAdd_Handler,
		},
		{
			MethodName: "EventAddNewAddress",
			Handler:    _NodeCommunications_EventAddNewAddress_Handler,
		},
		{
			MethodName: "EventGetBlockHeight",
			Handler:    _NodeCommunications_EventGetBlockHeight_Handler,
		},
		{
			MethodName: "EventGetAddressBalance",
			Handler:    _NodeCommunications_EventGetAddressBalance_Handler,
		},
		{
			MethodName: "EventResyncAddress",
			Handler:    _NodeCommunications_EventResyncAddress_Handler,
		},
		{
			MethodName: "EventSendRawTx",
			Handler:    _NodeCommunications_EventSendRawTx_Handler,
		},
		{
			MethodName: "SyncState",
			Handler:    _NodeCommunications_SyncState_Handler,
		},
		{
			MethodName: "GetChainState",
			Handler:    _NodeCommunications_GetChainState_Handler,
		},
		{
			MethodName: "AccountCreate",
			Handler:    _NodeCommunications_AccountCreate_Handler,
		},
		{
			MethodName: "AccountCheck",
			Handler:    _NodeCommunications_AccountCheck_Handler,
		},
		{
			MethodName: "GetRAMPrice",
			Handler:    _NodeCommunications_GetRAMPrice_Handler,
		},
		{
			MethodName: "GetTokenBalance",
			Handler:    _NodeCommunications_GetTokenBalance_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EventNewBlock",
			Handler:       _NodeCommunications_EventNewBlock_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "NewTx",
			Handler:       _NodeCommunications_NewTx_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "eos.proto",
}

func init() { proto1.RegisterFile("eos.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1166 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0x4d, 0x6f, 0xdb, 0x46,
	0x13, 0x7e, 0xf5, 0x65, 0x49, 0xa3, 0xcf, 0x6c, 0xde, 0x26, 0x8c, 0xd2, 0x00, 0x06, 0x9b, 0x14,
	0x09, 0x12, 0x18, 0xa9, 0x83, 0xa0, 0x45, 0x82, 0x16, 0x95, 0x1d, 0xd5, 0x55, 0x13, 0x2b, 0xc5,
	0x4a, 0xae, 0xe1, 0x93, 0xb0, 0x22, 0x27, 0x16, 0x61, 0x91, 0x54, 0xc9, 0x95, 0x2d, 0x1d, 0x7a,
	0x2d, 0xfa, 0xab, 0xfa, 0x6f, 0xfa, 0x27, 0x7a, 0x2a, 0x76, 0xb8, 0x4b, 0x53, 0xaa, 0xdc, 0x1c,
	0x8a, 0x9e, 0xb8, 0x33, 0xf3, 0xcc, 0xcc, 0xb3, 0x9c, 0xd9, 0x19, 0xa8, 0x62, 0x18, 0xef, 0xcd,
	0xa3, 0x50, 0x86, 0xac, 0x44, 0x1f, 0xbb, 0x0c, 0xa5, 0x9e, 0x3f, 0x97, 0x2b, 0x7b, 0x09, 0xcd,
	0x21, 0x46, 0x97, 0x9e, 0x83, 0x3f, 0x61, 0x14, 0x7b, 0x61, 0xc0, 0xee, 0xc0, 0xce, 0x24, 0x12,
	0x81, 0x33, 0xb5, 0x72, 0xbb, 0xb9, 0xc7, 0x55, 0xae, 0x25, 0xa5, 0x77, 0x42, 0xdf, 0xf7, 0xa4,
	0x95, 0x4f, 0xf4, 0x89, 0xc4, 0x3e, 0x85, 0xea, 0x64, 0xe1, 0xcd, 0x5c, 0xe9, 0xf9, 0x68, 0x15,
	0xc8, 0x74, 0xad, 0x60, 0x16, 0x94, 0x67, 0x22, 0x96, 0x52, 0x9c, 0x5b, 0x45, 0xb2, 0x19, 0xd1,
	0xfe, 0x2d, 0x07, 0xd5, 0x93, 0x18, 0xa3, 0xf8, 0x8d, 0x90, 0x82, 0x3d, 0x85, 0x82, 0x2f, 0xe6,
	0x56, 0x6e, 0xb7, 0xf0, 0xb8, 0xb6, 0x7f, 0x2f, 0x21, 0xbb, 0x97, 0x9a, 0xf7, 0x8e, 0xc5, 0xbc,
	0x17, 0xc8, 0x68, 0xc5, 0x15, 0xaa, 0x33, 0x80, 0x8a, 0x51, 0xb0, 0x36, 0x14, 0x2e, 0x70, 0xa5,
	0xb9, 0xaa, 0x23, 0x7b, 0x06, 0xa5, 0x4b, 0x31, 0x5b, 0x20, 0xf1, 0xac, 0xed, 0xdf, 0xd1, 0xc1,
	0xba, 0xae, 0x1b, 0x61, 0x1c, 0xf7, 0x96, 0x12, 0x03, 0x17, 0x5d, 0x9e, 0x80, 0x5e, 0xe5, 0xbf,
	0xca, 0xd9, 0x21, 0xb4, 0x36, 0xac, 0xea, 0xb6, 0x2a, 0x7b, 0xff, 0x8d, 0xf9, 0x0b, 0x0b, 0x92,
	0xd8, 0x2e, 0xd4, 0x4e, 0xc5, 0x6c, 0x86, 0xb2, 0x1f, 0xb8, 0xb8, 0xa4, 0x14, 0x25, 0x5e, 0xbb,
	0xba, 0x56, 0x31, 0x1b, 0xea, 0x3a, 0x58, 0x02, 0x29, 0x10, 0xa4, 0x2e, 0x32, 0x3a, 0xfb, 0x11,
	0x54, 0x39, 0xce, 0x67, 0xab, 0x7e, 0xf0, 0x21, 0x54, 0xbf, 0xc8, 0xc7, 0x38, 0x16, 0xe7, 0xa8,
	0x73, 0x19, 0xd1, 0xfe, 0x35, 0x07, 0xf5, 0x53, 0x21, 0x9d, 0xa9, 0x0e, 0xa8, 0xa0, 0x3a, 0x8e,
	0x81, 0x6a, 0x51, 0xf1, 0x4d, 0x18, 0x9a, 0xea, 0x6c, 0xe7, 0x5b, 0xf8, 0x38, 0xdf, 0xe2, 0x16,
	0xbe, 0xa7, 0x50, 0x3b, 0x98, 0x85, 0xce, 0xc5, 0xf7, 0xe8, 0x9d, 0x4f, 0x25, 0x7b, 0x08, 0xcd,
	0x29, 0x0a, 0x77, 0x3c, 0x51, 0xba, 0x71, 0xb0, 0xf0, 0x89, 0x4d, 0x83, 0xd7, 0x95, 0x96, 0x80,
	0x83, 0x85, 0xcf, 0x6c, 0x68, 0x64, 0x50, 0x9e, 0xab, 0x99, 0xd5, 0x52, 0x50, 0xdf, 0xb5, 0x9f,
	0xa6, 0x7f, 0x7e, 0x14, 0x72, 0x8c, 0x57, 0x81, 0x73, 0xf3, 0x1d, 0xed, 0xcf, 0xa0, 0x7c, 0x20,
	0x66, 0x22, 0x70, 0xa8, 0xad, 0xf4, 0xd1, 0x80, 0x26, 0x89, 0x68, 0x3f, 0x81, 0x12, 0x17, 0x57,
	0xa3, 0xa5, 0xba, 0xb9, 0x8c, 0x44, 0x10, 0x0b, 0x47, 0x7a, 0x61, 0x40, 0xb0, 0x3a, 0xcf, 0xaa,
	0xec, 0x17, 0x00, 0x43, 0x0c, 0xdc, 0xd1, 0x92, 0x63, 0x3c, 0x67, 0x8f, 0xa0, 0x99, 0x31, 0x2a,
	0xbe, 0x49, 0xe4, 0x46, 0x46, 0xdb, 0x77, 0xed, 0x3f, 0xf2, 0x50, 0xed, 0xbd, 0x1f, 0x76, 0x49,
	0xfe, 0x6f, 0xdb, 0x84, 0x3d, 0x81, 0xa2, 0x5c, 0xcd, 0x91, 0x4a, 0xd2, 0xdc, 0xff, 0x44, 0x37,
	0x72, 0x9a, 0x7d, 0x6f, 0xb4, 0x9a, 0x23, 0x27, 0x08, 0x63, 0x50, 0xfc, 0x10, 0x85, 0xbe, 0x55,
	0x22, 0x1a, 0x74, 0x66, 0x4d, 0xc8, 0xcb, 0xd0, 0xda, 0x21, 0x4d, 0x5e, 0x86, 0xec, 0x21, 0xec,
	0x08, 0x3f, 0x5c, 0x04, 0xd2, 0x2a, 0xd3, 0xcb, 0xa8, 0x9b, 0x97, 0x11, 0xc7, 0x28, 0xb9, 0xb6,
	0xa9, 0x48, 0x3e, 0xfa, 0xa1, 0x55, 0x49, 0x22, 0xa9, 0xb3, 0xba, 0x66, 0x44, 0xd5, 0xb1, 0xaa,
	0xbb, 0xb9, 0xc7, 0x15, 0xae, 0x25, 0xfb, 0x0c, 0x8a, 0xa3, 0x24, 0x7b, 0x73, 0xc4, 0xbb, 0x83,
	0xe1, 0x77, 0x3d, 0x3e, 0x1e, 0xbd, 0x7f, 0xdb, 0x1b, 0xb4, 0xff, 0xc7, 0x5a, 0x50, 0xeb, 0x0f,
	0x87, 0x27, 0x3d, 0xad, 0xc8, 0xb1, 0x5b, 0xd0, 0x38, 0x38, 0x39, 0x1b, 0xf3, 0xee, 0xf1, 0xf8,
	0xe0, 0x6c, 0xd4, 0x1b, 0xb6, 0xf3, 0xac, 0x06, 0x65, 0xad, 0x6a, 0x17, 0x58, 0x1d, 0x2a, 0xc3,
	0xde, 0xbb, 0x77, 0x24, 0x15, 0x6d, 0x0e, 0xa0, 0x2b, 0xcc, 0xf1, 0x67, 0x6a, 0x0a, 0xc7, 0x21,
	0xee, 0xa6, 0x29, 0x12, 0x51, 0x51, 0x8b, 0x57, 0xfe, 0x24, 0x9c, 0x99, 0xc6, 0x4f, 0x24, 0x75,
	0x0d, 0x27, 0x74, 0xcd, 0x44, 0xa2, 0xb3, 0xfd, 0x00, 0xca, 0x5d, 0xed, 0xc6, 0xa0, 0x18, 0x08,
	0xdf, 0x74, 0x0f, 0x9d, 0xed, 0x53, 0x28, 0xd1, 0xaf, 0xa0, 0x6c, 0xbe, 0x9f, 0x66, 0x2b, 0x70,
	0x23, 0xaa, 0x61, 0x37, 0x8f, 0xd0, 0xf1, 0xd4, 0xa4, 0xa4, 0x84, 0x0d, 0x7e, 0xad, 0xc8, 0x70,
	0x29, 0x64, 0xb9, 0xd8, 0xbf, 0x40, 0x5b, 0xe7, 0x3d, 0x8c, 0x50, 0x48, 0xba, 0xd1, 0x16, 0x02,
	0xec, 0x01, 0x80, 0xea, 0xb3, 0x4b, 0x1c, 0xab, 0x91, 0x96, 0xdc, 0xa7, 0x9a, 0x68, 0xde, 0xe2,
	0x8a, 0xdd, 0x87, 0x6a, 0x78, 0x15, 0x60, 0x44, 0xd6, 0x24, 0x43, 0x85, 0x14, 0xca, 0x78, 0x0f,
	0x2a, 0x91, 0xf0, 0xc7, 0x4e, 0x18, 0x4b, 0xea, 0x97, 0x22, 0x2f, 0x47, 0xc2, 0x3f, 0x0c, 0x63,
	0x69, 0x3f, 0x80, 0x52, 0x6f, 0xe9, 0xc5, 0x92, 0xfd, 0x1f, 0x4a, 0xa8, 0x0e, 0x94, 0xb4, 0xc2,
	0x13, 0xc1, 0xde, 0x85, 0x0a, 0xef, 0x1e, 0xff, 0x18, 0x79, 0x0e, 0x2a, 0xc4, 0x5c, 0x1d, 0x08,
	0x91, 0xe3, 0x89, 0x60, 0xff, 0x00, 0x15, 0x5d, 0x8b, 0xf8, 0x1f, 0x2a, 0xa1, 0xda, 0x4b, 0xfd,
	0xbe, 0xd8, 0xca, 0xd3, 0x14, 0xdf, 0x6c, 0x2f, 0xb2, 0xd9, 0x7f, 0xe6, 0x00, 0x0e, 0xa7, 0xc2,
	0x0b, 0x86, 0x52, 0x48, 0xfc, 0x37, 0xa3, 0xa4, 0xbe, 0x36, 0x4a, 0xd8, 0xe7, 0xd0, 0xca, 0x60,
	0xd2, 0x6d, 0x54, 0xe0, 0x8d, 0x14, 0x35, 0x52, 0x1b, 0xe9, 0x6b, 0xb8, 0xaf, 0x56, 0xd0, 0xd8,
	0x8b, 0x22, 0xbc, 0x54, 0x3b, 0x6f, 0x32, 0xc3, 0x4c, 0xfa, 0x22, 0xa5, 0xb7, 0x14, 0xa4, 0x9f,
	0x41, 0xa4, 0x54, 0x5e, 0x43, 0xe7, 0x26, 0x77, 0xcf, 0xa5, 0xe7, 0x57, 0xe7, 0x77, 0xb7, 0x7a,
	0xf7, 0xdd, 0xfd, 0xdf, 0x77, 0x80, 0x0d, 0x42, 0x17, 0x0f, 0x43, 0xdf, 0x5f, 0x04, 0x9e, 0x23,
	0xd4, 0x33, 0x8e, 0xd9, 0x3e, 0xd4, 0xf4, 0x12, 0xa6, 0x85, 0x60, 0x7e, 0x1c, 0x6d, 0xe8, 0x8e,
	0x79, 0xf6, 0x1b, 0x6b, 0xfa, 0x25, 0xb4, 0x7a, 0x97, 0x18, 0xc8, 0x7e, 0xe0, 0x49, 0x4f, 0xcc,
	0xba, 0xae, 0xcb, 0xda, 0x9b, 0x6b, 0xb3, 0x63, 0x34, 0xd7, 0xcb, 0xe6, 0x35, 0x30, 0x72, 0xeb,
	0xba, 0xee, 0x00, 0xaf, 0xcc, 0x5e, 0xb9, 0xad, 0x71, 0xd9, 0x65, 0xb3, 0xc5, 0xf9, 0x4b, 0xb8,
	0x4d, 0xce, 0x47, 0x28, 0xb3, 0xeb, 0x60, 0x9d, 0x2f, 0xd3, 0x52, 0x16, 0xf1, 0x2d, 0xdc, 0x31,
	0x8e, 0x3a, 0xba, 0x19, 0xe4, 0x1b, 0xdb, 0xd9, 0x6c, 0x81, 0x4e, 0xd3, 0x44, 0xd1, 0xb8, 0x6f,
	0x34, 0xef, 0xc4, 0x6c, 0x78, 0xdf, 0xe4, 0xfd, 0x77, 0xea, 0x2f, 0xa0, 0x41, 0xfe, 0x03, 0xbc,
	0x22, 0x62, 0x1f, 0x27, 0xfd, 0x3c, 0xc7, 0xbe, 0x80, 0x26, 0x39, 0xa9, 0x2d, 0x91, 0x2c, 0x15,
	0xe3, 0x45, 0x52, 0xe7, 0x56, 0x5a, 0x9a, 0x74, 0x8b, 0x3c, 0x81, 0xd2, 0x00, 0xb3, 0xc8, 0x24,
	0x7e, 0x7b, 0x73, 0x76, 0x53, 0xf4, 0xea, 0x70, 0x15, 0x38, 0xc9, 0x3b, 0xd8, 0x42, 0x60, 0xcb,
	0x2d, 0x9e, 0x43, 0xe3, 0x08, 0x65, 0xe6, 0xf9, 0xac, 0x67, 0x31, 0x7c, 0x32, 0x80, 0x57, 0xd0,
	0x58, 0x1b, 0x3d, 0xec, 0xae, 0xf9, 0x65, 0x1b, 0x03, 0x69, 0x4b, 0xb6, 0x67, 0x50, 0x37, 0xa8,
	0x29, 0x3a, 0x17, 0xac, 0xb9, 0xee, 0xda, 0x49, 0x93, 0xd3, 0x70, 0x79, 0x06, 0xb5, 0x23, 0x94,
	0xe9, 0x24, 0x59, 0x67, 0xd6, 0x32, 0xc1, 0x8d, 0xf9, 0x25, 0xb4, 0x8e, 0x50, 0x8e, 0xc2, 0x0b,
	0x0c, 0x4c, 0x89, 0x6f, 0xad, 0x97, 0x5c, 0x71, 0x6a, 0xad, 0xab, 0xe2, 0xc9, 0x0e, 0xc9, 0x2f,
	0xfe, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xea, 0xdb, 0x22, 0x5b, 0xd2, 0x0a, 0x00, 0x00,
}
